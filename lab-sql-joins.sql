-- 1. List the number of films per category.

SELECT category_id, COUNT(*) AS film_count
FROM film_category
GROUP BY category_id;

-- 2. Retrieve the store ID, city, and country for each store.

SELECT store.store_id, city.city, country.country FROM sakila.address
JOIN sakila.store 
ON address.address_id = store.address_id
JOIN sakila.city
ON address.city_id = city.city_id
JOIN sakila.country
ON city.country_id = country.country_id
GROUP BY store.store_id;

-- 3. Calculate the total revenue generated by each store in dollars.

SELECT DISTINCT store.store_id, SUM(payment.amount) AS total_payment
FROM store
JOIN staff on store.store_id = staff.store_id
JOIN payment on payment.staff_id = staff.staff_id
GROUP BY store.store_id

-- 4. Determine the average running time of films for each category.

SELECT category.name, AVG(film.length) AS 'average running time' FROM sakila.film_category
JOIN sakila.film
ON film_category.film_id = film.film_id
JOIN sakila.category
ON film_category.category_id = category.category_id
GROUP BY category.category_id;

-- 5. Identify the film categories with the longest average running time.

SELECT category.name, AVG(film.length) AS avg_running_time
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
GROUP BY category.name
ORDER BY avg_running_time DESC;

-- 6. Display the top 10 most frequently rented movies in descending order.

SELECT film.film_id, film.title, COUNT(rental.rental_id) AS rental_count
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.film_id, film.title
ORDER BY rental_count DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT film.title, store.store_id
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN store ON store.store_id = inventory.store_id
WHERE film.title = 'Academy Dinosaur' AND store.store_id = 1;